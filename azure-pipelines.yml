# Gradle

# Build your Java project and run tests with Gradle using a Gradle wrapper script.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
  - master

pool:
  vmImage: ubuntu-latest

#variables:
#  gloabal_var1 : defaultvalue

steps:
  - powershell: |
      Write-Host "This works $env:MY_MAPPED_ENV_VAR"
#      Write-Host "##vso[task.setvariable variable=AppName]$env:MY_MAPPED_ENV_VAR"
#      Write-Host "AppName is $env:VAR1"
    env:
      MY_MAPPED_ENV_VAR: $(PIPELINEVAR2)

  - powershell: |
      New-Item -Path .\test.txt
      Set-Content -Path .\test.txt -Value 'Hello, Welcome to Azure'
      $P = Get-Content -Path .\test.txt
      $curDir = Get-Location
      $fileName = "/test.txt"
      $fileLocation = $curDir+@fileName
      Write-Host "file value is $P"
      Write-Host "file location is $fileLocation"
      Write-Host "##vso[task.setvariable variable=AppName]$fileLocation"

#  - task: Gradle@2
#    inputs:
#      workingDirectory: ''
#      gradleWrapperFile: 'gradlew'
#      gradleOptions: '-Xmx3072m'
#      javaHomeOption: 'JDKVersion'
#      jdkVersionOption: '1.8'
#      jdkArchitectureOption: 'x64'
#      publishJUnitResults: true
#      testResultsFiles: '**/TEST-*.xml'
#      tasks: 'build'
#  - powershell: |
#      Write-Host "MY_MAPPED_ENV_VAR is $env:MY_MAPPED_ENV_VAR"
#      Write-Host "VAR1 is $env:VAR1"
#      Write-Host "VAR2 is $env:VAR2"
