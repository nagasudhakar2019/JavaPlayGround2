# Gradle
# Build your Java project and run tests with Gradle using a Gradle wrapper script.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
  - master

pool:
  vmImage: ubuntu-latest

variables:
  AZURE_VAR1: $(PIPELINEVAR1)

steps:
  - task: PowerShell@2
    Write-Host "Using the mapped env var for this task works and is recommended: $env:MY_MAPPED_ENV_VAR"
    env:
      MY_MAPPED_ENV_VAR: $(PIPELINEVAR1)

  - task: Gradle@2
    inputs:
      script: |
        Write-Host "MY_MAPPED_ENV_VAR value in Gradle2: $env:MY_MAPPED_ENV_VAR"
        Write-Host "PIPELINEVAR1 value in Gradle2: $env:PIPELINEVAR1"
        Write-Host "AZURE_VAR1 value in Gradle2: $env:AZURE_VAR1"
      workingDirectory: ''
      gradleWrapperFile: 'gradlew'
      gradleOptions: '-Xmx3072m'
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: '1.8'
      jdkArchitectureOption: 'x64'
      publishJUnitResults: true
      AZURE_VAR3: $(PIPELINEVAR1)
      AZURE_VAR4: $(env:MY_MAPPED_ENV_VAR)
      testResultsFiles: '**/TEST-*.xml'
      tasks: 'build'
